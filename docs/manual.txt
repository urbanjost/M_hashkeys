b3hs_hash_key_jenkins (3m_hashkeys) - [M_hashkeys] hash key algorithm by Bob Jenkins (LICENSE:PD)
crc32_hash (3m_hashkeys) - [M_hashkeys] CRC (Cyclic Redundancy Check) (LICENSE:PD)
dirtys_sha256 (3m_hashkeys) - [M_hashkeys] generate a SHA-256 hashing
djb2_hash (3m_hashkeys) - [M_hashkeys:bucket_hash] djb2 string hash (algorithm by Daniel J. Bernstein) (LICENSE:PD)
luhn_checksum (3m_hashkeys) - [M_hashkeys] Luhn checksum algorithm applied to a string of numeric values
M_hashkeys__sha3 (3m_hashkeys__sha3) - [M_hashkeys__sha3::INTRO] a module implementing the SHA-3 hash function
sdbm_hash (3m_hashkeys) - [M_hashkeys:bucket_hash] sdbm string hash (LICENSE:PD)
sha256 (3m_hashkeys) - [M_hashkeys] generate a SHA-256 hashing
crc32_hash(3m_hashkeys) 			       crc32_hash(3m_hashkeys)



NAME
  crc32_hash(3f) - [M_hashkeys] CRC (Cyclic Redundancy Check) (LICENSE:PD)


SYNOPSIS
  function crc32_hash(a,continue) result (crc)

     class(*),intent(in)	  :: anything(:)
     logical,intent(in),optional  :: continue
     integer(int64)		  :: crc_out


DESCRIPTION
  This ia 32-bit version of the Cyclic Redundancy Check(CRC).  This variant of
  CRC-32 uses LSB-first order, sets the initial CRC to FFFFFFFF_int32, and
  complements the final CRC.

  The result should be in accordance with ISO 3309, ITU-T V.42, Gzip and PNG.

OPTIONS
  anything
    input value to generate a CRC check for. May be a array or scalar of
    numeric or string values of type CHARACTER, int8, int16, int32, int64,
    real32, real64, real128

  continue
    optional parameter. If not present or .F. starts new CRC sum. If .T.
    continues a CRC starting with last CRC calculated.

RETURNS
  crc
    The calculated CRC sum. It is calculated as a 32-bit value but returned as
    a 64-bit value, as Fortran does not currently support unsigned integers.

REFERENCES
  Algorithms are described in "Computation of CRC" in Wikipedia.  Also see

	https://en.wikipedia.org/wiki/Cyclic_redundancy_check


AUTHOR
  This was derived from an unattributed example on http://rosettacode.org, but
  has been modified.

EXAMPLE
  Sample program:

     program demo_crc32_hash
     use,intrinsic :: ISO_FORTRAN_ENV, only : int64
     use M_hashkeys, only : crc32_hash
     implicit none
     integer :: i
     integer(int64) :: crc
     character(*), parameter :: s = "The quick brown fox jumps over the lazy dog"
	! string
	crc=crc32_hash(s)
	print "(Z8)", crc
	print "(i0)", crc
	! character array
	print "(i0)", crc32_hash([ &
		& 'T','h','e',' ',&
		& 'q','u','i','c','k',' ',&
		& 'b','r','o','w','n',' ',&
		& 'f','o','x',' '])
	print "(i0)", crc32_hash([ &
		& 'j','u','m','p','s',' ',&
		& 'o','v','e','r',' ',&
		& 't','h','e',' ',&
		& 'l','a','z','y',' ',&
		& 'd','o','g'],continue=.true.)
	! numeric array
	print "(i0)", crc32_hash([(i,i=1,100)])
     end program demo_crc32_hash

  Expected output:

     414FA339
     1095738169
     2293265890
     1095738169
     1783575711





				 July 22, 2023	       crc32_hash(3m_hashkeys)
dirtys_sha256(3m_hashkeys)			    dirtys_sha256(3m_hashkeys)



NAME
  dirtys_sha256(3f) - [M_hashkeys] generate a SHA-256 hashing

SYNOPSIS
  function dirtys_sha256(str)

     character(len=64)		  :: dirtys_sha256
     character(len=*), intent(in) :: str



DESCRIPTION
  A Fortran module for SHA-256 hashing.

  The quick and dirty routine (dirtys_sha256(3f)) operates on whatever bits
  that come in, without swapping to big-endian words, and does therefore not
  pass any of the standard tests - but works at roughly twice the speed. Use
  this if you want a good hash function but don't care about following the
  SHA-256 standard specifications.

  Note that this code will not produce the same results on big-endian machines
  and the module was only tested on a little-endian Ubuntu LTS 12.04 system
  using gfortran 4.6.3 and CygWin using Gortran 7.3.0.

OPTIONS
  str
    The message to digest.

RETURNS
  dirtys_sha256
    The SHA-256 digest as a string of length 64.

AUTHOR
  This routine is heavily based on the SHA-256 routines by Mikael Leetmaa
  <leetmaa@kth.se>, 2014-01-05. changes have been made to incorporate it into
  the GPF (General Purpose Fortran) framework.

  If you found this useful, please let Mikael Leetmaa know.

EXAMPLES
  Using slurp(3f) and switch(3f) from the GPF (General Purpose Fortran)
  collection to read in a file and convert it into a string, generate digest
  values for a list of files. Note that this example reads the entire input
  file into memory twice, and so requires very large amounts of memory if very
  large files are processed.

      program demo_dirty_sha256
      use,intrinsic :: iso_fortran_env, only : ERROR_UNIT
      use M_hashkeys,			only : sha256, dirty_sha256
      use M_io, 			only : slurp
      use M_strings,			only : switch
      implicit none
      character(len=1),allocatable :: text(:) ! array to hold file in memory
      character(len=:),allocatable :: string
      integer			   :: i
      character(len=4096)	   :: filename
	 do i=1,command_argument_count()  ! step through filenames on command line
	    call get_command_argument(i, filename)
	    call slurp(filename,text) ! allocate character array and copy file into it
	    if(.not.allocated(text))then
	       write(ERROR_UNIT,*)'*rever* ERROR: failed to load file '//trim(filename)
	    else
	       string=switch(text) ! switch array to a single character variable
	       deallocate(text)    ! release memory
	       write(*,*)dirty_sha256(string),len(string),trim(filename) ! write digest value
	    endif
	 enddo
      end program demo_dirty_sha256

  Sample output:

      FA9D11011034F1081A367D4F2F1EB909AC0849FF090A9320B6824156C5628DFD	      2011 dynamic_dummy_arrays.f90
      FE48473BC7B9C13067EC2C108CB8A650A186605D5F905736D9CB9DE76E9A1A21	      5444 fspiro.f90
      306CDB5BB2A8C30C711FA5D35A6A12F4FDB4F003ED77438E922B56BBA1024F49	     27108 pprint.f90



				 July 22, 2023	    dirtys_sha256(3m_hashkeys)
djb2_hash(3m_hashkeys)					djb2_hash(3m_hashkeys)



NAME
  djb2_hash(3f) - [M_hashkeys:bucket_hash] djb2 string hash (algorithm by
  Daniel J. Bernstein) (LICENSE:PD)


SYNOPSIS
  function djb2_hash_arr(anything,continue) result(hash_128)

      class(*),intent(in)	   :: anything(:)
      logical,intent(in),optional  :: continue
      !! use,intrinsic : ISO_FORTRAN_ENV, only : int64
      integer(kind=int128)	   :: hash_128


DESCRIPTION
  djb2_hash(3f) is based on the string hash routine commonly known as
  djb2(3c). This algorithm was first described by Dan J. Bernstein many years
  ago in comp.lang.c. This version returns a value calculated using a 64-bit
  hash, which is returned as a 128bit value (not always available in Fortran)
  to allow the value to always be a positive value; as Fortran does not
  (currently) support a standard unsigned integer. If the value is changed to
  be a 64-bit value on platforms that do not support 128-bit INTEGER values
  the value may be negative, but is otherwise usable.

  Such non-reversible hashes may be used for data or file fingerprints, to
  confirm unchanging results during regression testing, ...

  More information is widely available on string hashes (including the well-
  known djb2(3c) algorithm) on such sources as Wikipedia. Consult such
  resources to confirm the suitability of this algorithm for your use. This
  algorithm was probably first proposed as a bucket hash.

  The algorithm does not consider the Endian of the programming environment.

OPTIONS
  STR
    May be a CHARACTER string or an array of common intrinsic types.
    Currently, the types defined in the procedure are character(len=*);
    complex; integer(kind=int8); integer(kind=int16); integer(kind=int32);
    integer(kind=int64); integer(kind=int128); real(kind=real32);
    real(kind=real64); real(kind=real128).

  CONTINUE
    indicate whether to continue accumulating the hash value from the last
    call. This is not threadsafe. This allows for continued hashes so that a
    hash can be calculated for a series of calls.

RETURNS
  djb2_hash
    A 128-bit INTEGER hash value for the (possibly accumulated) data.

EXAMPLE
  Sample program:

      program demo_djb2_hash
      use M_hashkeys, only : djb2_hash, int128
      implicit none
      integer(kind=int128)	   :: hash
      character(len=:),allocatable :: string
      integer			   :: i
      ! string
      string='test djb2_hash'
      hash=djb2_hash(string)
      write(*,*)'string=',string,' hash=',hash
      ! array of characters
      hash=djb2_hash(['t','e','s','t',' ','d','j','b','2','_','h','a','s','h'])
      write(*,*)'string=',string,' hash=',hash
      ! continued hash
      hash=djb2_hash(['t','e','s','t'])
      hash=djb2_hash([' ','d','j','b','2'],continue=.true.)
      hash=djb2_hash(['_','h','a','s','h'],continue=.true.)
      write(*,*)'string=',string,' hash=',hash
      ! array of integers
      hash=djb2_hash([(i,i=0,100)])
      write(*,*)'hash for values 0 to 100 is ',hash
      !
      end program demo_djb2_hash



				 July 22, 2023		djb2_hash(3m_hashkeys)
sdbm_hash(3m_hashkeys)					sdbm_hash(3m_hashkeys)



NAME
  sdbm_hash(3f) - [M_hashkeys:bucket_hash] sdbm string hash (LICENSE:PD)


SYNOPSIS
  use,intrinsic : ISO_FORTRAN_ENV, only : int64 function
  sdbm_hash_arr(anything,continue) result(hash_128)

      class(*),intent(in)	   :: anything(:)
      logical,intent(in),optional  :: continue
      integer(kind=int128)	   :: hash_128


DESCRIPTION
  sdbm_hash(3f) is based on the string hash routine commonly known as
  sdbm(3c).

  this algorithm was created for the sdbm (a public-domain reimplementation of
  ndbm) database library. It was found to do well in scrambling bits, causing
  good distribution of the keys and fewer splits. it also happens to be a good
  general hashing function with good distribution. the actual function is

	hash(i) = hash(i - 1) * 65599 + str[i]

  what is available here is the faster version used in gawk. [there is even a
  faster, duff-device version]. The magic constant 65599 was picked out of
  thin air while experimenting with different constants, and turns out to be a
  prime. this is one of the algorithms used in berkeley db (see sleepycat) and
  elsewhere.

  This version returns a value calculated using a 64-bit hash, which is
  returned as a 128bit value (not always available in Fortran) to allow the
  value to always be a positive value; as Fortran does not (currently) support
  a standard unsigned integer. If the value is changed to be a 64-bit value on
  platforms that do not support 128-bit INTEGER values the value may be
  negative, but is otherwise usable.

  Such non-reversible hashes may be used for data or file fingerprints, to
  confirm unchanging results during regression testing, ...

  More information is widely available on string hashes (including the well-
  known sdbm(3c) algorithm) on such sources as Wikipedia. Consult such
  resources to confirm the suitability of this algorithm for your use.

  The algorithm does not consider the Endian of the programming environment.

OPTIONS
  STR
    May be a CHARACTER string or an array of common intrinsic types.
    Currently, the types defined in the procedure are character(len=*);
    complex; integer(kind=int8); integer(kind=int16); integer(kind=int32);
    integer(kind=int64); integer(kind=int128); real(kind=real32);
    real(kind=real64); real(kind=real128).

  CONTINUE
    indicate whether to continue accumulating the hash value from the last
    call. This is not threadsafe. This allows for continued hashes so that a
    hash can be calculated for a series of calls.

RETURNS
  sdbm_hash
    A 128-bit INTEGER hash value for the (possibly accumulated) data.

EXAMPLE
  Sample program:

      program demo_sdbm_hash
      use M_hashkeys, only : sdbm_hash, int128
      implicit none
      integer(kind=int128)	   :: hash
      character(len=:),allocatable :: string
      integer			   :: i
      ! string
      string='test sdbm_hash'
      hash=sdbm_hash(string)
      write(*,*)'string=',string,' hash=',hash
      ! array of characters
      hash=sdbm_hash(['t','e','s','t',' ','s','d','b','m','_','h','a','s','h'])
      write(*,*)'string=',string,' hash=',hash
      ! continued hash
      hash=sdbm_hash(['t','e','s','t'])
      hash=sdbm_hash([' ','s','d','b','m'],continue=.true.)
      hash=sdbm_hash(['_','h','a','s','h'],continue=.true.)
      write(*,*)'string=',string,' hash=',hash
      ! array of integers
      hash=sdbm_hash([(i,i=0,100)])
      write(*,*)'hash for values 0 to 100 is ',hash
      !
      end program demo_sdbm_hash




				 July 22, 2023		sdbm_hash(3m_hashkeys)
b3hs_hash_key_jenkins(3m_hashkeys)	    b3hs_hash_key_jenkins(3m_hashkeys)



NAME
  b3hs_hash_key_jenkins(3f) - [M_hashkeys] hash key algorithm by Bob Jenkins
  (LICENSE:PD)


SYNOPSIS
  function b3hs_hash_key_jenkins (key, range) result (code)

     character(*), intent(in) :: key
     integer, intent(in)      :: range
     integer		      :: code


DESCRIPTION
  Based on implementation of Bob Jenkins hash function by Rich Townsen, posted
  2008-03-23 at

       http://computer-programming-forum.com/49-fortran/0596e59d0fa2e5e4.htm


OPTIONS
  KEY
    string to generate a hash key for

  RANGE
    range should be a power of 2. Note that the 32-bit algorithm is used

RETURNS
  CODE
    returned hash value in range specified by RANGE



				 July 22, 20b3hs_hash_key_jenkins(3m_hashkeys)
luhn_checksum(3m_hashkeys)			    luhn_checksum(3m_hashkeys)



NAME
  luhn_checksum(3f) - [M_hashkeys] Luhn checksum algorithm applied to a string
  of numeric values


DESCRIPTION
  The Luhn algorithm or Luhn formula, also known as the "modulus 10" or "mod
  10" algorithm, named after IBM scientist Hans Peter Luhn, is a simple
  checksum formula used to validate a variety of identification numbers such
  as credit card numbers, IMEI numbers, National Provider Identifier numbers
  in the United States, Canadian Social Insurance Numbers, Israel ID Numbers,
  Greek Social Security Numbers, and survey codes appearing on McDonald's,
  Taco Bell, and Tractor Supply Co. receipts. It was created by IBM scientist
  Hans Peter Luhn and described in U.S. Patent No. 2,950,048, filed on January
  6, 1954, and granted on August 23, 1960.

  The algorithm is in the public domain and is in wide use today. It is
  specified in ISO/IEC 7812-1.[1] It is not intended to be a cryptographically
  secure hash function; it was designed to protect against accidental errors,
  not malicious attacks. Most credit cards and many government identification
  numbers use the algorithm as a simple method of distinguishing valid numbers
  from mistyped or otherwise incorrect numbers.

  The formula verifies a number against its included check digit, which is
  usually appended to a partial account number to generate the full account
  number. This number must pass the following test:

  1.  From the rightmost digit, which is the check digit, and moving left,
      double the value of every second digit. The check digit is not doubled;
      the first digit doubled is immediately to the left of the check digit.
      If the result of this doubling operation is greater than 9 (e.g., 8 × 2
      = 16), then add the digits of the result (e.g., 16: 1 + 6 = 7, 18: 1 + 8
      =

      9)  or, alternatively, the same final result can be found by subtracting
	  9 from that result (e.g., 16: 16 − 9 = 7, 18: 18 − 9 = 9).

  2.  Take the sum of all the digits.

  3.  If the total modulo 10 is equal to 0 (if the total ends in zero) then
      the number is valid according to the Luhn formula; else it is not valid.

  Assume an example of an account number "7992739871" that will have a check
  digit added, making it of the form 7992739871x:

  Account number

    7 9  9  2  7  3  9	8  7  1  x

  Double every other

    7 18  9  4	7  6  9  16  7	2  x

  Sum digits

    7 9  9  4  7  6  9	7  7  2  x

  The sum of all the digits in the third row is 67+x.

  The check digit (x) is obtained by computing the sum of the non-check digits
  then computing 9 times that value modulo 10 (in equation form, ((67 × 9) mod
  10)). In algorithm form:

    1.	Compute the sum of the non-check digits (67).

    2.	Multiply by 9 (603).

    3.	The units digit (3) is the check digit. Thus, x=3.

  (Alternative method) The check digit (x) is obtained by computing the sum of
  the other digits (third row) then subtracting the units digit from 10 (67 =>
  Units digit 7; 10 − 7 = check digit 3). In algorithm form:

    1.	Compute the sum of the non-check digits (67).

    2.	Take the units digit (7).

    3.	Subtract the units digit from 10.

    4.	The result (3) is the check digit. In case the sum of digits ends in 0
	then 0 is the check digit.

  This makes the full account number read 79927398713.

  Each of the numbers 79927398710, 79927398711, 79927398712, 79927398713,
  79927398714, 79927398715, 79927398716, 79927398717, 79927398718, 79927398719
  can be validated as follows.

    1.	Double every second digit, from the rightmost: (1×2) = 2, (8×2) = 16,
	(3×2) = 6, (2×2) = 4, (9×2) = 18

    2.	Sum all the individual digits (digits in parentheses are the products
	from Step 1): x (the check digit) + (2) + 7 + (1+6) + 9 + (6) + 7 +
	(4) + 9 + (1+8) + 7 = x + 67.

    3.	If the sum is a multiple of 10, the account number is possibly valid.
	Note that 3 is the only valid digit that produces a sum (70) that is a
	multiple of 10.

    4.	Thus these account numbers are all invalid except possibly 79927398713
	which has the correct check digit.

  Alternately, you can use the same checksum creation algorithm, ignoring the
  checksum already in place as if it had not yet been calculated. Then
  calculate the checksum and compare this calculated checksum to the original
  checksum included with the credit card number. If the included checksum
  matches the calculated checksum, then the number is valid.

STRENGTHS AND WEAKNESSES
  The Luhn algorithm will detect any single-digit error, as well as almost all
  transpositions of adjacent digits. It will not, however, detect
  transposition of the two-digit sequence 09 to 90 (or vice versa). It will
  detect 7 of the 10 possible twin errors (it will not detect 22 ↔ 55, 33 ↔ 66
  or 44 ↔ 77).

  Other, more complex check-digit algorithms (such as the Verhoeff algorithm
  and the Damm algorithm) can detect more transcription errors. The Luhn mod N
  algorithm is an extension that supports non-numerical strings.

  Because the algorithm operates on the digits in a right-to-left manner and
  zero digits affect the result only if they cause shift in position, zero-
  padding the beginning of a string of numbers does not affect the
  calculation. Therefore, systems that pad to a specific number of digits (by
  converting 1234 to 0001234 for instance) can perform Luhn validation before
  or after the padding and achieve the same result.

  Prepending a 0 to odd-length numbers makes it possible to process the number
  from left to right rather than right to left, doubling the odd-place digits.

  The algorithm appeared in a US Patent[2] for a hand-held, mechanical device
  for computing the checksum. It was therefore required to be rather simple.
  The device took the mod 10 sum by mechanical means. The substitution digits,
  that is, the results of the double and reduce procedure, were not produced
  mechanically. Rather, the digits were marked in their permuted order on the
  body of the machine.

OPTIONS
  S the string of digits to be checked. Spaces and dashes are ignored.

RESULT
  LUHN_CHECKSUM
    the Luhn checksum of the string; which is the digits in the input string
    with the checksum digit appended.

REFERENCES
  From Wikipedia, the free encyclopedia

	 (https://en.wikipedia.org/wiki/Luhn_algorithm)

EXAMPLES
  Sample program

       program demo_luhn_checksum
       use M_hashkeys, only : luhn_checksum
       implicit none
       character(len=:),allocatable :: ccards(:), string
       integer :: i, j
       write(*,*)'GOOD VALUES'
       ccards=[ character(len=20) :: '79927398713', &
				   & '49927398716',&
				   & '1234567812345670' ]
       call checkem()
       write(*,*)'BAD VALUES'
       ccards=[ character(len=20) :: &
	 & '79927398710', '79927398711', '79927398712', '79927398714',	&
	 & '79927398715', '79927398716', '79927398717', '79927398718',	&
	 & '79927398719',  &
	  '49927398717', '1234567812345678' ]
       call checkem()
       contains
       subroutine checkem
	  ! validate these numbers
	  do i=1,size(ccards)
	     j=len(trim(ccards(i)))
	     string=luhn_checksum(ccards(i)(:j-1))
	     write(*,'(a,1x,a,1x,l1)')ccards(i),string,ccards(i).eq.string
	  enddo

	  string='123456 781-234-567'
	  write(*,*)'from ',string,' got ',luhn_checksum(string), &
	  & ' which should be 1234567812345670'
       end subroutine checkem
       end program demo_luhn_checksum




				 July 22, 2023	    luhn_checksum(3m_hashkeys)
sha256(3m_hashkeys)					   sha256(3m_hashkeys)



NAME
  sha256(3f) - [M_hashkeys] generate a SHA-256 hashing


SYNOPSIS
  function sha256(str)

     character(len=64)		  :: sha256
     character(len=*), intent(in) :: str


DESCRIPTION
  A Fortran module for SHA-256 hashing.

  Note that this code will not produce the same results on big-endian machines
  and the module was only tested on a little-endian Ubuntu LTS 12.04 system
  using gfortran 4.6.3.

OPTIONS
  str
    The message to digest.

RETURNS
  sha256
    The SHA-256 digest as a string of length 64.

COMPILE NOTES
  The '-fno-range-check' flag is required on gfortran(1) since the Fortran
  standard otherwise doesn't currently allow us to work with all bits in the
  integers (as if they were unsigned).

AUTHOR
  This routine is heavily based on the SHA-256 routines by Mikael Leetmaa
  <leetmaa@kth.se>, 2014-01-05. changes have been made to incorporate it into
  the GPF (General Purpose Fortran) framework.

  If you found this useful, please let Mikael Leetmaa know.

EXAMPLE
  Sample program:

     program demo_sha256
     use M_hashkeys, only : sha256, dirty_sha256
     implicit none
     character(len=:),allocatable :: str
     character(len=64)		  :: ref

     ! Test the sha256 function with a set of reference strings.

     str=""
     ref="E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855"
     call unit_check('sha256',sha256(str)==ref,'test sha256 1')

     str="abc"
     ref="BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD"
     call unit_check('sha256',sha256(str)==ref,'test sha256 2')

     str="abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
     ref="248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1"
     call unit_check('sha256',sha256(str)==ref,'test sha256 3')

     str="abcdefghbcdefghicdefghijdefghijkefghijklfghi&
	  &jklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu"
     ref="CF5B16A778AF8380036CE59E7B0492370B249B11E8F07A51AFAC45037AFEE9D1"
     call unit_check('sha256',sha256(str)==ref,'test sha256 4')

     str=repeat("a",1000000)
     ref="CDC76E5C9914FB9281A1C7E284D73E67F1809A48A497200E046D39CCC7112CD0"
     call unit_check('sha256',sha256(str)==ref,'test sha256 5')

     str="message digest"
     ref="F7846F55CF23E14EEBEAB5B4E1550CAD5B509E3348FBC4EFA3A1413D393CB650"
     call unit_check('sha256',sha256(str)==ref,'test sha256 6')

     str="secure hash algorithm"
     ref="F30CEB2BB2829E79E4CA9753D35A8ECC00262D164CC077080295381CBD643F0D"
     call unit_check('sha256',sha256(str)==ref,'test sha256 7')

     str="SHA256 is considered to be safe"
     ref="6819D915C73F4D1E77E4E1B52D1FA0F9CF9BEAEAD3939F15874BD988E2A23630"
     call unit_check('sha256',sha256(str)==ref,'test sha256 8')

     str="For this sample, this 63-byte string will be used as input data"
     ref="F08A78CBBAEE082B052AE0708F32FA1E50C5C421AA772BA5DBB406A2EA6BE342"
     call unit_check('sha256',sha256(str)==ref,'test sha256 9')

     str="This is exactly 64 bytes long, not counting the terminating byte"
     ref="AB64EFF7E88E2E46165E29F2BCE41826BD4C7B3552F6B382A9E7D3AF47C245F8"
     call unit_check('sha256',sha256(str)==ref,'test sha256 10')

     ! Check the quick and dirty implementation as well.
     ref="69E3FACD5F08321F78117BD53476E5321845433356F106E7013E68EC367F3017"
     call unit_check('sha256',dirty_sha256(str)==ref,'test dirtysha256 1')

     !!str=repeat("abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno",16777216)
     !!ref="50E72A0E26442FE2552DC3938AC58658228C0CBFB1D2CA872AE435266FCD055E"
     !!call unit_check('sha256',sha256(str)==ref,'test sha256 11 -- long test')

     contains
     subroutine unit_check(name,test,message)
     character(len=*),intent(in) :: name
     logical,intent(in) 	 :: test
     character(len=*),intent(in) :: message
	write(*,'(a)') repeat("=",64)
	write(*,'(a)') sha256(str)
	write(*,'(a)') ref
	if(test)then
	   write(*,*)trim(name)," PASSED: ",trim(message)
	else
	   write(*,*)trim(name)," FAILED: ",trim(message)
	endif
     end subroutine unit_check
     !
     end program demo_sha256


UNIT TEST
  When porting to a new programming environment use the built-in unit test ...

     program test_sha256
     use M_hashkeys, only : test_suite_sha256
	call test_suite_sha256()
     end program test_sha256




				 July 22, 2023		   sha256(3m_hashkeys)
M_hashkeys__sha3(3m_hashkeys__sha3)	   M_hashkeys__sha3(3m_hashkeys__sha3)



NAME
  M_hashkeys__sha3(3fm) - [M_hashkeys__sha3::INTRO] a module implementing the
  SHA-3 hash function

SYNOPSIS
  Procedures:

      use M_hashkeys__sha3, only : sha3
      use M_hashkeys__sha3, only : sha3_update
      use M_hashkeys__sha3, only : sha3_state
      use M_hashkeys__sha3, only : sha3_digest
      use M_hashkeys__sha3, only : sha3_hexdigest
      use M_hashkeys__sha3, only : sha3_file
      use M_hashkeys__sha3, only : sha3_auto_test

DESCRIPTION
  This module implements the SHA-3 hash function, according to FIPS PUB 202,
  SHA-3 Standard: Permutation-Based Hash and Extendable-Output Functions, a
  NIST publication.

  Originally based on routines from http://alcinoe.net/fortran.html

  In this module, we focus on hashing strings of bytes (as opposed to strings
  of bits whose length is not a multiple of 8). We also focus on providing a
  fixed-length digest, rather than extendable output. For us, bytes mean
  integers of kind 1.

  There are two ways of using the module:

    •  a functional form, in which the whole array of bytes to hash is passed
       to a function, which returns an array of bytes:

	      digest = sha3( buffer, d )

    where d is an integer (default kind) that specifies the digest length in
    bits (so that 'digest' should have a size of d/8)

    •  a subroutine form, which is typically used like this:

	       type(sha3_state) :: S
	       call sha3_update( S, buffer1, d )
	       call sha3_update( S, buffer2 )
	       ...
	       call sha3_digest( S, digest )
    where you pass the data to hash little by little with you which can start
    anew with the same state)

  According to the standard, the digest size d may be one of 224, 256, 384,
  512, which results in arrays of bytes of size 28, 32, 48 and

  64. These arrays of bytes can be converted into a hexadecimal string of
      length 56, 64, 96 and 128 by calling the 'sha3_hexdigest' function:

	  hd = sha3_hexdigest( digest )

  If the data to hash is a string, one may convert it to an array of bytes or
  integer(kind=int8) using the transfer intrinsic:

	buffer = transfer( string, buffer )

  where size(buffer) = len(string)

  The final routine exported by the module is sha3_auto_test(), which hashes
  some test vectors, as found on:

	http://www.di-mgt.com.au/sha_testvectors.html

  and some files in the directory 'test_vectors', for which the digest was
  found using the Python implementation from

	https://github.com/gvanas/KeccakCodePackage.


EXAMPLE
  Sample program

     program demo_M_hashkeys__sha3
     use M_hashkeys__sha3
     implicit none
     character(len=128) :: fname, arg
	call get_command_argument( 1, arg )
	if ( arg(1:1) .eq. '-' ) then
	   if ( trim(arg) .eq. '-a' ) then
	      call sha3_auto_test()
	   else
	      call get_command_argument( 2, fname )
	     select case(trim(arg))
	     case('-224'); call sha3_file( 224, trim(fname) )
	     case('-256'); call sha3_file( 256, trim(fname) )
	     case('-384'); call sha3_file( 384, trim(fname) )
	     case('-512'); call sha3_file( 512, trim(fname) )
	     case default
		 print *,'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
	     end select
	   endif
	else
	   print *, 'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
	   print *, 'usage: "sha3 -a" or "sha3 (-224|-256|-384|-512) fname"'
	endif
  end program demo_M_hashkeys__sha3



				 July 22, 2M_hashkeys__sha3(3m_hashkeys__sha3)
